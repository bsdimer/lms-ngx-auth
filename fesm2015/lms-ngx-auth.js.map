{"version":3,"file":"lms-ngx-auth.js","sources":["ng://lms-ngx-auth/lib/authentication-config.ts","ng://lms-ngx-auth/lib/session.ts","ng://lms-ngx-auth/lib/lms-ngx-auth.service.ts","ng://lms-ngx-auth/lib/lms-ngx-auth.module.ts","ng://lms-ngx-auth/lib/user-entity-property.ts","ng://lms-ngx-auth/lib/sign-up-request.ts","ng://lms-ngx-auth/lib/user-entity.ts","ng://lms-ngx-auth/lib/role-entity.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const AUTH_CONFIG = new InjectionToken<AuthenticationConfig>('AuthenticationConfig');\n\n\nexport interface ClientConfig {\n    name: string;\n    password: string;\n}\n\nexport interface AuthenticationConfig {\n    client: ClientConfig;\n    loginUrl: string;\n    signUpUrl: string;\n    userInfoUrl: string;\n}\n\n","export class Session {\n\n    constructor(token: Object) {\n        this.email = token['email'];\n        this.emailVerified = token['email_verified'];\n        this.expiresAt = token['exp'];\n        this.givenName = token['given_name'];\n        this.familyName = token['family_name'];\n        this.phone = token['phone_number'];\n        this.picture = token['picture'];\n        this.scope = token['scope'];\n        this.id = token['sub'];\n        this.authorities = token['roles'];\n    }\n\n    id: number;\n    username: string;\n    expiresAt: number;\n    givenName: string;\n    familyName: string;\n    phone: any;\n    picture: any;\n    scope: any;\n    email: string;\n    emailVerified: boolean;\n    authorities: {role: string, client: string}[] = [];\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {AUTH_CONFIG, AuthenticationConfig} from './authentication-config';\nimport {Session} from './session';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {map, share} from 'rxjs/operators';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {UserEntity} from './user-entity';\nimport {SignUpRequest} from './sign-up-request';\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LmsNgxAuthService {\n\n    private currentUserSubject: BehaviorSubject<Session>;\n    public currentUser: Observable<Session>;\n    private tokenName: string = '@lms/authToken';\n    private jwtHelperService: JwtHelperService;\n\n    constructor(@Inject(AUTH_CONFIG) public config: AuthenticationConfig,\n                public httpClient: HttpClient) {\n        this.jwtHelperService = new JwtHelperService();\n        let session: Session = new Session({});\n        if (localStorage.getItem(this.tokenName)) {\n            const token = localStorage.getItem(this.tokenName);\n            const decodedToken = this.jwtHelperService.decodeToken(JSON.parse(token)['accessToken']);\n            session = new Session(decodedToken);\n        }\n        this.currentUserSubject = new BehaviorSubject<Session>(session);\n        this.currentUser = this.currentUserSubject.asObservable();\n        this.currentUserSubject.next(session);\n    }\n\n    public get authenticationChange$(): Observable<Session> {\n        return this.currentUserSubject.asObservable();\n    }\n\n    public get authenticationChangeSimple$(): Observable<boolean> {\n        return this.currentUserSubject.asObservable().pipe(\n            map(() => this.isAuthenticated()),\n        );\n    }\n\n    public getAuthorizationHeader(): string {\n        const token = localStorage.getItem(this.tokenName);\n        if (token) {\n            const accessToken = JSON.parse(token)['accessToken'];\n            return `Bearer ${accessToken}`;\n        }\n        return '';\n    }\n\n    public isAuthenticated(): boolean {\n        const token = JSON.parse(localStorage.getItem(this.tokenName));\n        return token !== null && token !== undefined && !this.jwtHelperService.isTokenExpired(token.accessToken);\n    }\n\n    public getSession(): Session {\n        return this.currentUserSubject.value;\n    }\n\n    public login(username: string, password: string): Observable<any> {\n        localStorage.removeItem(this.tokenName);\n        const headers = new HttpHeaders(\n            {\n                'Authorization': 'Basic ' + btoa(`${this.config.client.name}:${this.config.client.password}`),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        );\n        const credentials = {\n            username: username,\n            password: password,\n            grant_type: 'password',\n        };\n\n        return this.httpClient.post(this.config.loginUrl, credentials, {headers: headers})\n            .pipe(map(token => {\n                const decodedToken = this.jwtHelperService.decodeToken(token['accessToken']);\n                const session: Session = new Session(decodedToken);\n                if (token) {\n                    localStorage.setItem(this.tokenName, JSON.stringify(token));\n                    this.currentUserSubject.next(session);\n                }\n                return session;\n            }), share());\n    }\n\n    public signUp(request: SignUpRequest): Observable<any> {\n        return this.httpClient.post(this.config.signUpUrl, request);\n    }\n\n    public logout(): Observable<boolean> {\n        localStorage.removeItem(this.tokenName);\n        this.currentUserSubject.next(null);\n        return of(true);\n    }\n\n    public prepareHttpClientAuthHeader() {\n        return {headers: {'Authorization': this.getAuthorizationHeader()}};\n    }\n\n    public whoami(): Observable<UserEntity> {\n        return this.httpClient.get<UserEntity>('/user/me', this.prepareHttpClientAuthHeader());\n    }\n\n    hasRole(role: string) {\n        for (const ra of this.getSession().authorities) {\n            if (ra.role === role && ra.client === this.config.client.name) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import { ErrorHandler, ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { AUTH_CONFIG, AuthenticationConfig } from './authentication-config';\nimport { LmsNgxAuthService } from './lms-ngx-auth.service';\n\n@NgModule()\nexport class LmsNgxAuthModule {\n    /*constructor(@Optional() @SkipSelf() parentModule: LmsNgxAuthModule) {\n        throw new Error(`LmsNgxAuthModule has already been loaded. Import LmsNgxAuthModule modules in the AppModule only.`);\n    }*/\n\n    public static forRoot(config: AuthenticationConfig): ModuleWithProviders {\n        return <ModuleWithProviders>{\n            ngModule: LmsNgxAuthModule,\n            providers: [\n                LmsNgxAuthService,\n                {\n                    provide: AUTH_CONFIG,\n                    useValue: config,\n                },\n            ],\n        };\n    }\n}\n","export class UserEntityProperty {\n    id: string;\n    key: string;\n    value: string;\n}\n","export class SignUpRequest {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  username: string;\n  password: string;\n  properties?: any = {};\n}\n","import {RoleEntity} from './role-entity';\nimport {UserEntityProperty} from './user-entity-property';\n\nexport class UserEntity {\n    authorities: RoleEntity[];\n    email: string;\n    emailVerified: boolean;\n    enabled: boolean;\n    firstName: string;\n    password: string;\n    id: string;\n    imageUrl: string;\n    lastName: string;\n    phone: string;\n    properties: UserEntityProperty[];\n    provider: string;\n    providerId: string;\n    username: string;\n    acknowledged: boolean;\n}\n","export class RoleEntity {\n    id: string;\n    authority: string;\n    client: string;\n}\n"],"names":[],"mappings":"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"}